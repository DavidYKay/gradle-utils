apply plugin: 'maven-publish'
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit-dep:4.11'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.scuilion.gradle'
            artifactId 'utils'
            version '0.1'
            from components.java
        }
    }
}

//Add funtional test
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

    integrationTestCompile.extendsFrom compile
    integrationTestRuntime.extendsFrom runtime
}

sourceSets {
    integrationTest {
        java {
            srcDir 'src/integrationTest/java'
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
    }
}

task integrationTest(type:Test){
    dependsOn publishToMavenLocal
    dependsOn integrationTestClasses

    systemProperties['integrationTest.location'] = new File(sourceSets.integrationTest.output.resourcesDir, 'pluginTest').absolutePath

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath + sourceSets.main.output 

    getReports().getHtml().setDestination(new File("$project.reporting.baseDir", 'integrationTest'))
    getReports().getJunitXml().setDestination(new File("$project.buildDir", 'functional-results')) 
}
integrationTest.mustRunAfter test
